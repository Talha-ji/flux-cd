name: Deploy to Server and Start Port Forwarding

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Set up SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 3: Add the server's host key to known hosts
      - name: Add host key to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # Step 4: Deploy to the server
      - name: Deploy to server
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          TOKEN: ${{ secrets.EC2_TOKEN }}
        run: |
          ssh ${SSH_USER}@${SSH_HOST} << 'EOF'
          set -e

          # Navigate to the project directory
          cd /home/ubuntu

          # Configure git
          git config --global --add safe.directory /home/ubuntu

          # Set the correct remote URL with token
          git remote set-url origin "https://$TOKEN@github.com/Talha-ji/flux-cd.git"

          # Fetch and reset
          git fetch origin main
          git checkout main
          git reset --hard origin/main

          # Set proper permissions
          chown -R ubuntu:ubuntu /home/ubuntu

          # List directory contents to verify
          ls -la
          EOF

      # Step 5: Start port-forwarding
      - name: Start port-forwarding
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh ${SSH_USER}@${SSH_HOST} << 'EOF'
          set -e

          LOG_FILE="/home/ubuntu/port-forward.log"

          # Wait for 1 minute after deployment changes
          echo "[$(date)] Waiting for 1 minute to allow the deployment to stabilize..." | tee -a $LOG_FILE
          sleep 60

          while true; do
            # Get the name of the latest hello-world pod
            POD_NAME=$(kubectl get pods -l app=hello-world -o jsonpath="{.items[0].metadata.name}" 2>/dev/null)

            # Check if the pod exists
            if [ -z "$POD_NAME" ]; then
              echo "[$(date)] No hello-world pod found. Retrying in 5 seconds..." | tee -a $LOG_FILE
              sleep 5  # Wait for 5 seconds before retrying
              continue
            fi

            # Start port-forwarding
            echo "[$(date)] Found pod: $POD_NAME. Starting port-forward..." | tee -a $LOG_FILE
            kubectl port-forward svc/hello-world 3000:5678 --address 0.0.0.0 >> $LOG_FILE 2>&1

            # If port-forwarding fails, wait for 5 seconds and retry
            echo "[$(date)] Port-forwarding failed. Retrying in 5 seconds..." | tee -a $LOG_FILE
            sleep 5  # Wait for 5 seconds before retrying
          done
          EOF

      # Step 6: Monitor port-forwarding logs
      - name: Monitor port-forwarding logs
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh ${SSH_USER}@${SSH_HOST} "tail -f /home/ubuntu/port-forward.log"
